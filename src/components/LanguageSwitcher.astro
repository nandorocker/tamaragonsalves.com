---
import { languages, getLangFromUrl } from '../i18n/index';

export interface Props {
  lang: 'en' | 'pt';
}

const { lang } = Astro.props;
const currentLang = lang || 'en';

// Generate URLs for language switching
const currentPath = Astro.url.pathname;
let pathWithoutLang = currentPath.replace(/^\/(en|pt)/, '');

// Ensure we have a proper path
if (!pathWithoutLang || pathWithoutLang === '') {
  pathWithoutLang = '/';
} else if (!pathWithoutLang.startsWith('/')) {
  pathWithoutLang = '/' + pathWithoutLang;
}

const languageLinks = Object.entries(languages).map(([langCode, langName]) => {
  const href = `/${langCode}${pathWithoutLang}`;
  return {
    code: langCode,
    name: langName,
    href,
    isActive: langCode === currentLang
  };
});
---

<div class="relative inline-flex items-center group">
  <button 
    type="button" 
    class="flex items-center gap-1 px-3 py-1.5 bg-transparent border border-pink-700 rounded-md cursor-pointer text-lg font-semibold font-inherit text-pink-700 no-underline not-italic transition-all duration-200 ease-in-out hover:text-pink-800 hover:border-pink-800 dark:text-pink-300 dark:border-pink-300 dark:hover:text-white"
    aria-label="Select language"
    aria-expanded="false"
    id="language-switcher-trigger"
  >
    <span>{currentLang.toUpperCase()}</span>
  </button>
  
  <ul class="absolute top-full right-0 bg-white border border-pink-700 rounded-md shadow-md list-none m-0 p-0 min-w-16 z-50 hidden group-[.open]:block dark:bg-gray-800 dark:border-pink-700">
    {languageLinks.map(({ code, name, href, isActive }) => (
      <li class="m-0 p-0 first:m-0 last:m-0">
        <a 
          href={href}
          class={`block px-3 py-2 text-gray-700 dark:text-gray-300 no-underline !text-sm font-semibold transition-all duration-200 ease-in-out hover:bg-gray-100 hover:text-gray-700 dark:hover:bg-gray-700 dark:hover:text-gray-300 first:rounded-t-md last:rounded-b-md ${isActive ? 'bg-pink-50 text-pink-700 dark:bg-pink-900 dark:text-pink-300 hover:bg-pink-50 hover:text-pink-700 dark:hover:bg-pink-900 dark:hover:text-pink-300' : ''}`}
          aria-current={isActive ? 'page' : undefined}
        >
          {code.toUpperCase()}
        </a>
      </li>
    ))}
  </ul>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const languageSwitcher = document.querySelector('.group');
    const trigger = languageSwitcher?.querySelector('#language-switcher-trigger');
    
    if (languageSwitcher && trigger) {
      trigger.addEventListener('click', (e) => {
        e.stopPropagation();
        const isOpen = languageSwitcher.classList.contains('open');
        
        // Close all other open language switchers
        document.querySelectorAll('.group.open').forEach(switcher => {
          switcher.classList.remove('open');
          const btn = switcher.querySelector('#language-switcher-trigger');
          if (btn) btn.setAttribute('aria-expanded', 'false');
        });
        
        if (!isOpen) {
          languageSwitcher.classList.add('open');
          trigger.setAttribute('aria-expanded', 'true');
        }
      });
      
      document.addEventListener('click', () => {
        languageSwitcher.classList.remove('open');
        trigger.setAttribute('aria-expanded', 'false');
      });
      
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
          languageSwitcher.classList.remove('open');
          trigger.setAttribute('aria-expanded', 'false');
          (trigger as HTMLElement).focus();
        }
      });
    }
  });
</script>
