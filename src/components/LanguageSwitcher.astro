---
import { languages, getLangFromUrl } from '../i18n/index';

export interface Props {
  lang: 'en' | 'pt';
}

const { lang } = Astro.props;
const currentLang = lang || 'en';

// Generate URLs for language switching
const currentPath = Astro.url.pathname;
const pathWithoutLang = currentPath.replace(/^\/(en|pt)/, '') || '/';

const languageLinks = Object.entries(languages).map(([langCode, langName]) => {
  const isDefault = langCode === 'en';
  const href = isDefault ? pathWithoutLang : `/${langCode}${pathWithoutLang}`;
  return {
    code: langCode,
    name: langName,
    href,
    isActive: langCode === currentLang
  };
});
---

<div class="language-switcher">
  <button 
    type="button" 
    class="language-trigger"
    aria-label="Select language"
    aria-expanded="false"
  >
    <span class="current-lang">{currentLang.toUpperCase()}</span>
  </button>
  
  <ul class="language-dropdown">
    {languageLinks.map(({ code, name, href, isActive }) => (
      <li>
        <a 
          href={href}
          class={`language-option ${isActive ? 'active' : ''}`}
          aria-current={isActive ? 'page' : undefined}
        >
          {code.toUpperCase()}
        </a>
      </li>
    ))}
  </ul>
</div>

<style>
  .language-switcher {
    position: relative;
    display: inline-flex;
    align-items: center;
  }

  .language-trigger {
    display: flex;
    align-items: center;
    gap: 0.25rem;
    padding: 0.375rem 0.75rem;
    background: none;
    border: 1px solid #be185d;
    border-radius: 0.375rem;
    cursor: pointer;
    font-size: 1.125rem;
    font-weight: 600;
    font-family: inherit;
    color: #be185d;
    text-decoration: none;
    font-style: normal;
    transition: all 0.2s ease;
  }

  .language-trigger:hover {
    color: #a21caf;
    border-color: #a21caf;
  }

  .dark .language-trigger {
    color: #be185d;
    border-color: #be185d;
  }

  .dark .language-trigger:hover {
    color: #a21caf;
    border-color: #a21caf;
  }

  .mobile-menu-open .language-trigger {
    color: white;
    border-color: white;
  }

  .mobile-menu-open .language-trigger:hover {
    color: #f3e8ff;
    border-color: #f3e8ff;
  }

  .language-dropdown {
    position: absolute;
    top: 100%;
    right: 0;
    background: white;
    border: 1px solid #be185d;
    border-radius: 0.375rem;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
    list-style: none;
    margin: 0;
    padding: 0;
    min-width: 4rem;
    z-index: 50;
    display: none;
  }

  .language-switcher.open .language-dropdown {
    display: block;
  }

  .language-dropdown li {
    margin: 0;
    padding: 0;
  }

  .language-option {
    display: block;
    padding: 0.5rem 0.75rem;
    color: #374151;
    text-decoration: none;
    font-size: 1.125rem;
    font-weight: 600;
    transition: all 0.2s ease;
  }

  .language-option:hover {
    background: #f3f4f6;
    color: #374151;
  }

  .language-option.active {
    background: #fdf2f8;
    color: #be185d;
  }

  .language-option.active:hover {
    background: #fdf2f8;
    color: #be185d;
  }

  .language-dropdown li:first-child .language-option {
    border-top-left-radius: 0.375rem;
    border-top-right-radius: 0.375rem;
  }

  .language-dropdown li:last-child .language-option {
    border-bottom-left-radius: 0.375rem;
    border-bottom-right-radius: 0.375rem;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const languageSwitcher = document.querySelector('.language-switcher');
    const trigger = languageSwitcher?.querySelector('.language-trigger');
    
    if (languageSwitcher && trigger) {
      trigger.addEventListener('click', (e) => {
        e.stopPropagation();
        const isOpen = languageSwitcher.classList.contains('open');
        
        document.querySelectorAll('.language-switcher.open').forEach(switcher => {
          switcher.classList.remove('open');
          const btn = switcher.querySelector('.language-trigger');
          if (btn) btn.setAttribute('aria-expanded', 'false');
        });
        
        if (!isOpen) {
          languageSwitcher.classList.add('open');
          trigger.setAttribute('aria-expanded', 'true');
        }
      });
      
      document.addEventListener('click', () => {
        languageSwitcher.classList.remove('open');
        trigger.setAttribute('aria-expanded', 'false');
      });
      
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
          languageSwitcher.classList.remove('open');
          trigger.setAttribute('aria-expanded', 'false');
          (trigger as HTMLElement).focus();
        }
      });
    }
  });
</script>
