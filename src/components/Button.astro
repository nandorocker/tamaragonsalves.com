---
interface Props {
	variant?: 'primary' | 'secondary' | 'outline';
	size?: 'xs' | 'lg' | 'xl';
	href?: string;
	type?: 'button' | 'submit' | 'reset';
	icon?: string;
	iconPosition?: 'before' | 'after';
	iconSrc?: string; // For custom SVG icons
	class?: string;
	[key: string]: any; // Allow any additional HTML attributes
}

const { 
	variant = 'primary', 
	size = 'lg', 
	href, 
	type = 'button',
	icon,
	iconPosition = 'before',
	iconSrc,
	class: className = '',
	...rest
} = Astro.props;

// Always include base button class
const variantClass = variant === 'primary' ? 'button' : `button button-${variant}`;

// Map size to CSS class
const sizeClass = `button-${size}`;

// Add icon classes if icon is provided
const iconClasses = icon ? `icon-${iconPosition} ${icon} icon-space-sm` : '';

const buttonClasses = `${variantClass} ${sizeClass} ${iconClasses} ${className}`.trim();

const Element = href ? 'a' : 'button';
const elementProps = href ? { href, ...rest } : { type, ...rest };
---

<Element class={buttonClasses} {...elementProps}>
	{iconPosition === 'before' && (
		<slot name="icon-before">
			{iconSrc && <img src={iconSrc} alt="" class="w-4 h-4 mr-2" />}
		</slot>
	)}
	<slot />
	{iconPosition === 'after' && (
		<slot name="icon-after">
			{iconSrc && <img src={iconSrc} alt="" class="w-4 h-4 ml-2" />}
		</slot>
	)}
</Element>
