---
import { images } from '../data/global';
import type { Language } from '../utils/i18n';
import { useTranslations } from '../utils/i18n';
import DropdownButton from './DropdownButton.astro';

interface LinkGroup {
  type: string;
  links: Array<{
    labelKey: string;
    url: string;
  }>;
}

interface Book {
  id: string;
  author: string;
  imageUrl: string;
  linkGroups: LinkGroup[];
}

export interface Props {
  book: Book;
  bookTranslations: any;
  lang: Language;
}

const { book, bookTranslations, lang } = Astro.props;

// Get book information from translations
const bookData = bookTranslations[book.id] || {};
const linkGroupTitles = bookTranslations.linkGroupTitles || {};
const linkLabels = bookTranslations.linkLabels || {};

// Get global translations for button labels
const t = useTranslations(lang);

// Group links by category for dropdowns
const downloadLinks = book.linkGroups.find(g => g.type === 'download')?.links || [];
const purchaseLinks = book.linkGroups.find(g => g.type === 'purchase')?.links || [];
const interviewLinks = book.linkGroups.find(g => g.type === 'interview')?.links || [];

// Combine download and purchase for "Read and Download"
const readDownloadLinks = [...downloadLinks, ...purchaseLinks];

// Find the first download or purchase link to use as title URL
const getTitleUrl = (): string | null => {
  if (readDownloadLinks.length > 0) {
    return readDownloadLinks[0].url;
  }
  return null;
};

const titleUrl = getTitleUrl();

// Construct image path once for performance
const imagePath = `${images}/${book.imageUrl}`;
---

<article class="book-carousel-item flex flex-col md:flex-row gap-6 items-start">
  <a data-fslightbox="books-home" href={imagePath} class="hover-shift-sm flex-shrink-0 mx-auto md:mx-0">
    <img src={imagePath} alt={bookData.imageAlt || 'Book cover'} class="w-32 md:w-40 rounded shadow-lg">
  </a>

  <div class="flex-1 min-w-0">
    <h5 class="mb-0 book-title">
      {titleUrl ? (
        <a href={titleUrl} target="_blank">{bookData.title}</a>
      ) : (
        bookData.title
      )}
    </h5>
    <p class="mb-3 text-base dark:text-gray-300"><em>{book.author}</em></p>
    
    <p class="book-description mb-4 dark:text-gray-300">{bookData.shortDescription || bookData.description}</p>
    
    <div class="flex flex-wrap gap-3">
      {readDownloadLinks.length > 0 && (
        <DropdownButton
          icon="icon-file-pdf"
          label={t('readDownload')}
          links={readDownloadLinks}
          linkLabels={linkLabels}
        />
      )}

      {interviewLinks.length > 0 && (
        <DropdownButton
          icon="icon-video"
          label={t('interviews')}
          links={interviewLinks}
          linkLabels={linkLabels}
        />
      )}
    </div>
  </div>
</article>

<style>
  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>
