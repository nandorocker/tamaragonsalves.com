---
import { images } from '../data/global';
import type { Language } from '../utils/i18n';

interface LinkGroup {
  type: string;
  links: Array<{
    labelKey: string;
    url: string;
  }>;
}

interface Book {
  id: string;
  author: string;
  imageUrl: string;
  linkGroups: LinkGroup[];
}

export interface Props {
  book: Book;
  bookTranslations: any;
  lang: Language;
}

const { book, bookTranslations, lang } = Astro.props;

// Get book information from translations
const bookData = bookTranslations[book.id] || {};
const linkGroupTitles = bookTranslations.linkGroupTitles || {};
const linkLabels = bookTranslations.linkLabels || {};

// Automatic icon mapping based on link type
const getIconForType = (type: string): string => {
  const iconMap: Record<string, string> = {
    'download': 'icon-file-pdf',
    'interview': 'icon-video',
    'purchase': 'icon-shopping-cart',
    'external': 'icon-external-link',
    'video': 'icon-play',
    'audio': 'icon-headphones',
    'article': 'icon-document'
  };
  return iconMap[type] || 'icon-external-link';
};

// Find the first download or purchase link to use as title URL
const getTitleUrl = (): string | null => {
  // Look for download links first, then purchase links
  const priorityTypes = ['download', 'purchase'];
  
  for (const type of priorityTypes) {
    const group = book.linkGroups.find(g => g.type === type);
    if (group && group.links.length > 0) {
      return group.links[0].url;
    }
  }
  
  return null;
};

const titleUrl = getTitleUrl();

// Construct image path once for performance
const imagePath = `${images}/${book.imageUrl}`;
---

<article class="book-item">
  <a data-fslightbox="books" href={imagePath} class="hover-shift-sm">
    <img src={imagePath} alt={bookData.imageAlt || 'Book cover'} srcset="" class="book-image">
  </a>

  <div class="book-info">
    <div>
      <h5 class="mb-0 book-title">
        {titleUrl ? (
          <a href={titleUrl} target="_blank">{bookData.title}</a>
        ) : (
          bookData.title
        )}
      </h5>
      <p class="mb-0 dark:text-gray-300"><em>{book.author}</em></p>
    </div>
    <p class="book-description">{bookData.description}</p>
    
    {book.linkGroups.map((group) => (
      <div>
        <span class="dark:text-gray-300">{linkGroupTitles[group.type] || group.type}:</span>
        <ul>
          {group.links.map((link) => (
            <li>
              <a 
                href={link.url} 
                target="_blank" 
                class={`icon-before ${getIconForType(group.type)} icon-space-sm`}
                rel="noopener noreferrer"
              >
                {link.labelKey ? linkLabels[link.labelKey] : link.url}
              </a>
            </li>
          ))}
        </ul>
      </div>
    ))}

    {book.linkGroups.length === 0 && titleUrl && (
      <a href={titleUrl} class="icon-before icon-file-pdf icon-space-sm">
        {linkGroupTitles.download || 'Download'}
      </a>
    )}
  </div>
</article>