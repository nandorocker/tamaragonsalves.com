---
import { images } from '../data/global';
import { loadAllTranslations, getTranslationSync } from '../utils/i18n';
import type { Language } from '../utils/i18n';

export interface Props {
  id: string;
  author: string;
  imageUrl: string;
  titleUrl?: string;
  downloadLinks?: Array<{
    url: string;
    icon?: string;
  }>;
  interviewLinks?: Array<{
    url: string;
    icon?: string;
  }>;
  purchaseLinks?: Array<{
    url: string;
  }>;
  lang: Language;
}

const { 
  id,
  author, 
  imageUrl, 
  titleUrl,
  downloadLinks = [],
  interviewLinks = [],
  purchaseLinks = [],
  lang
} = Astro.props;

// Load all translations (global + home page) for the current language
const translations = await loadAllTranslations(lang, 'home');

// Get book information from translations using the book ID
const title = getTranslationSync(translations, `books.${id}.title`) || `[books.${id}.title]`;
const description = getTranslationSync(translations, `books.${id}.description`) || `[books.${id}.description]`;

function getImageAlt(id: string): string {
  switch (id) {
    case 'alienacaoParental':
      return 'Cover of Parental Alienation book';
    case 'direitosHumanos':
      return 'Cover of Human Rights of Women book';
    case 'abortoReligiao':
      return 'Cover of Abortion and Religion book';
    default:
      return 'Book cover';
  }
}

const imageAlt = getImageAlt(id);

// Get book-specific translation data
const bookData = getTranslationSync(translations, `books.${id}`) || {};
const downloadLinksText = bookData.downloadLinks || {};
const interviewLinksText = bookData.interviewLinks || {};
const purchaseLinksText = bookData.purchaseLinks || {};

// Get generic text fallbacks
const downloadText = getTranslationSync(translations, 'download') || 'Download';
const interviewsText = getTranslationSync(translations, 'interviews') || 'Interviews';
const purchaseText = getTranslationSync(translations, 'purchase') || 'Purchase';

// Construct image path once for performance
const imagePath = `${images}/${imageUrl}`;
---

<article class="book-item">
  <a data-fslightbox="books" href={imagePath} class="hover-shift-sm">
    <img src={imagePath} alt={imageAlt} srcset="" class="book-image">
  </a>

  <div class="book-info">
    <div>
      <h5 class="mb-0 book-title">
        {titleUrl ? (
          <a href={titleUrl} target="_blank">{title}</a>
        ) : (
          title
        )}
      </h5>
      <p class="mb-0 dark:text-gray-300"><em>{author}</em></p>
    </div>
    <p class="book-description">{description}</p>
    
    {downloadLinks.length > 0 && (
      <div>
        <span class="dark:text-gray-300">{downloadText}:</span>
        <ul>
          {downloadLinks.map((link, index) => {
            // Map link URLs to translation keys
            let linkText = downloadText;
            if (id === 'alienacaoParental') {
              if (index === 0) linkText = downloadLinksText.cladem || downloadText;
              if (index === 1) linkText = downloadLinksText.usp || downloadText;
            }
            
            return (
              <li>
                <a href={link.url} target="_blank" 
                   class={`icon-before ${link.icon || 'icon-file-pdf'} icon-space-sm`}
                   rel="noopener noreferrer">
                  {linkText}
                </a>
              </li>
            );
          })}
        </ul>
      </div>
    )}

    {interviewLinks.length > 0 && (
      <div>
        <span class="dark:text-gray-300">{interviewsText}:</span>
        <ul>
          {interviewLinks.map((link, index) => {
            // Map link URLs to translation keys
            let linkText = interviewsText;
            if (id === 'alienacaoParental') {
              if (index === 0) linkText = interviewLinksText.radioUsp || interviewsText;
              if (index === 1) linkText = interviewLinksText.papoJus || interviewsText;
              if (index === 2) linkText = interviewLinksText.trf3 || interviewsText;
            }
            
            return (
              <li>
                <a href={link.url} target="_blank" 
                   class={`icon-before ${link.icon || 'icon-video'} icon-space-sm`}>
                  {linkText}
                </a>
              </li>
            );
          })}
        </ul>
      </div>
    )}

    {purchaseLinks.length > 0 && (
      <div>
        <span class="dark:text-gray-300">{purchaseText}:</span>
        {purchaseLinks.map((link, index) => {
          // Map link URLs to translation keys
          let linkText = purchaseText;
          if (id === 'direitosHumanos') {
            if (index === 0) linkText = purchaseLinksText.amazon || purchaseText;
            if (index === 1) linkText = purchaseLinksText.travessa || purchaseText;
          }
          
          return (
            <>
              <a href={link.url} target="_blank" rel="noopener noreferrer">{linkText}</a>
              {index < purchaseLinks.length - 1 ? ' / ' : ''}
            </>
          );
        })}
      </div>
    )}

    {downloadLinks.length === 0 && interviewLinks.length === 0 && purchaseLinks.length === 0 && titleUrl && (
      <a href={titleUrl} class="icon-before icon-file-pdf icon-space-sm">
        {downloadText}
      </a>
    )}
  </div>
</article>