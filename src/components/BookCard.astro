---
import { images } from '../data/global';
import { useTranslations, getLangFromUrl } from '../i18n/index';

export interface Props {
  titleKey: string;
  author: string;
  descriptionKey: string;
  imageUrl: string;
  imageAltKey: string;
  titleUrl?: string;
  downloadLinks?: Array<{
    textKey: string;
    url: string;
    icon?: string;
  }>;
  interviewLinks?: Array<{
    textKey: string;
    url: string;
    icon?: string;
  }>;
  purchaseLinks?: Array<{
    textKey: string;
    url: string;
  }>;
  purchaseTextKey?: string;
}

const { 
  titleKey, 
  author, 
  descriptionKey, 
  imageUrl, 
  imageAltKey, 
  titleUrl,
  downloadLinks = [],
  interviewLinks = [],
  purchaseLinks = [],
  purchaseTextKey
} = Astro.props;

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

// Resolve translation keys
const title = t(titleKey);
const description = t(descriptionKey);
const imageAlt = t(imageAltKey);
const purchaseText = purchaseTextKey ? t(purchaseTextKey) : undefined;
---
---

<article class="book-item">
  <a data-fslightbox="books" href={`${images}/${imageUrl}`} class="hover-shift-sm">
    <img src={`${images}/${imageUrl}`} alt={imageAlt} srcset="" class="book-image">
  </a>

  <div class="book-info">
    <div>
      <h5 class="mb-0 book-title">
        {titleUrl ? (
          <a href={titleUrl} target="_blank">{title}</a>
        ) : (
          title
        )}
      </h5>
      <p class="mb-0"><em>{author}</em></p>
    </div>
    <p class="book-description">{description}</p>
    
    {downloadLinks.length > 0 && (
      <div>
        {t('bookCardDownloadText')}
        <ul>
          {downloadLinks.map(link => (
            <li>
              <a href={link.url} target="_blank" 
                 class={`icon-before ${link.icon || 'icon-file-pdf'} icon-space-sm`}
                 rel="noopener noreferrer">
                {t(link.textKey)}
              </a>
            </li>
          ))}
        </ul>
      </div>
    )}

    {interviewLinks.length > 0 && (
      <div>
        {t('bookCardInterviewText')}
        <ul>
          {interviewLinks.map(link => (
            <li>
              <a href={link.url} target="_blank" 
                 class={`icon-before ${link.icon || 'icon-video'} icon-space-sm`}>
                {t(link.textKey)}
              </a>
            </li>
          ))}
        </ul>
      </div>
    )}

    {purchaseLinks.length > 0 && (
      <div>
        {purchaseText && <>{purchaseText}<br></>}
        {purchaseLinks.map((link, index) => (
          <>
            <a href={link.url} target="_blank" rel="noopener noreferrer">{t(link.textKey)}</a>
            {index < purchaseLinks.length - 1 ? ' / ' : ''}
          </>
        ))}
      </div>
    )}

    {downloadLinks.length === 0 && interviewLinks.length === 0 && purchaseLinks.length === 0 && titleUrl && (
      <a href={titleUrl} class="icon-before icon-file-pdf icon-space-sm">
        {t('bookCardFallbackDownloadText')}
      </a>
    )}
  </div>
</article>