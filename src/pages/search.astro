---
import { getCollection } from 'astro:content';
import BaseLayout from '../layouts/BaseLayout.astro';

// Get all blog posts for search index
const blogEntries = await getCollection('blog');
const searchData = blogEntries.map(entry => ({
  slug: entry.slug,
  title: entry.data.title,
  description: entry.data.description,
  category: entry.data.category,
  tags: entry.data.tags,
  pubDate: entry.data.pubDate.toISOString(),
}));
---

<BaseLayout title="Search - Tamara Amoroso Gonsalves" description="Search through publications, research, and blog posts.">
  <div style="max-width: 900px; margin: 0 auto; padding: 2rem; margin-top: 6rem;">
    <header style="margin-bottom: 3rem; text-align: center;">
      <h1 style="color: #333; margin-bottom: 1rem;">Search</h1>
      <p style="color: #666; font-size: 1.1rem;">Search through publications, research, and insights</p>
    </header>

    <!-- Search Interface -->
    <div style="margin-bottom: 2rem;">
      <div style="position: relative; max-width: 600px; margin: 0 auto;">
        <input 
          type="text" 
          id="search-input" 
          placeholder="Search for publications, topics, or keywords..."
          style="width: 100%; padding: 1rem 1rem 1rem 3rem; border: 2px solid #e5e7eb; border-radius: 0.5rem; font-size: 1rem; outline: none; transition: border-color 0.2s;"
        />
        <svg style="position: absolute; left: 1rem; top: 50%; transform: translateY(-50%); width: 1.25rem; height: 1.25rem; color: #6b7280;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m21 21-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
        </svg>
      </div>
      
      <!-- Filter Options -->
      <div style="margin-top: 1rem; text-align: center;">
        <label style="margin-right: 1rem; color: #374151;">
          <input type="checkbox" id="filter-publications" checked style="margin-right: 0.5rem;"> Publications
        </label>
        <label style="margin-right: 1rem; color: #374151;">
          <input type="checkbox" id="filter-research" checked style="margin-right: 0.5rem;"> Research
        </label>
        <label style="margin-right: 1rem; color: #374151;">
          <input type="checkbox" id="filter-speaking" checked style="margin-right: 0.5rem;"> Speaking
        </label>
        <label style="color: #374151;">
          <input type="checkbox" id="filter-advocacy" checked style="margin-right: 0.5rem;"> Advocacy
        </label>
      </div>
    </div>

    <!-- Search Results -->
    <div id="search-results" style="display: grid; gap: 2rem;">
      <!-- Results will be populated by JavaScript -->
    </div>

    <!-- No Results Message -->
    <div id="no-results" style="display: none; text-align: center; padding: 3rem; color: #666;">
      <h3>No results found</h3>
      <p>Try adjusting your search terms or filters</p>
    </div>

    <!-- Back to Blog Link -->
    <div style="margin-top: 3rem; text-align: center;">
      <a href="/blog" style="color: #2563eb; text-decoration: none;">← Back to Blog</a>
    </div>
  </div>

  <!-- Search Script -->
  <script is:inline define:vars={{ searchData }}>
    // Import the search utility
    import('../utils/search.js').then(({ SearchEngine }) => {
      // Initialize search engine
      const searchEngine = new SearchEngine(searchData, 'flexsearch');
      
      const searchInput = document.getElementById('search-input');
      const searchResults = document.getElementById('search-results');
      const noResults = document.getElementById('no-results');
      
      // Filter checkboxes
      const filterPublications = document.getElementById('filter-publications');
      const filterResearch = document.getElementById('filter-research');
      const filterSpeaking = document.getElementById('filter-speaking');
      const filterAdvocacy = document.getElementById('filter-advocacy');

      function getActiveFilters() {
        const filters = [];
        if (filterPublications.checked) filters.push('publication');
        if (filterResearch.checked) filters.push('research');
        if (filterSpeaking.checked) filters.push('speaking');
        if (filterAdvocacy.checked) filters.push('advocacy');
        return filters;
      }

      function performSearch() {
        const query = searchInput.value.trim();
        const activeFilters = getActiveFilters();
        
        if (query.length === 0) {
          displayResults([]);
          return;
        }

        // Use the search engine
        const results = searchEngine.search(query, {
          limit: 20,
          filters: activeFilters
        });

        displayResults(results);
      }

      function displayResults(results) {
        if (results.length === 0) {
          searchResults.style.display = 'none';
          noResults.style.display = 'block';
          return;
        }

        searchResults.style.display = 'grid';
        noResults.style.display = 'none';

        searchResults.innerHTML = results.map(item => `
          <article style="border: 1px solid #e5e7eb; border-radius: 0.5rem; padding: 1.5rem; background: white; box-shadow: 0 1px 3px rgba(0,0,0,0.1);">
            <header style="margin-bottom: 1rem;">
              <h2 style="margin: 0 0 0.5rem 0;">
                <a href="/blog/${item.slug}" style="color: #333; text-decoration: none;">
                  ${item.title}
                </a>
              </h2>
              <div style="display: flex; gap: 1rem; align-items: center; color: #666; font-size: 0.9rem;">
                <time>${new Date(item.pubDate).toLocaleDateString('en-US', { 
                  year: 'numeric', 
                  month: 'long', 
                  day: 'numeric' 
                })}</time>
                <span>•</span>
                <span style="background: #f0f9ff; color: #0369a1; padding: 0.25rem 0.5rem; border-radius: 0.25rem; text-transform: capitalize;">
                  ${item.category}
                </span>
                ${item.score ? `<span style="color: #16a34a; font-size: 0.8rem;">Score: ${(1 - item.score).toFixed(2)}</span>` : ''}
              </div>
            </header>
            
            <p style="color: #374151; line-height: 1.6; margin-bottom: 1rem;">
              ${item.description}
            </p>
            
            <div style="margin-bottom: 1rem;">
              ${item.tags.slice(0, 4).map(tag => `
                <span style="background: #f3f4f6; color: #374151; padding: 0.25rem 0.5rem; border-radius: 0.25rem; margin-right: 0.5rem; font-size: 0.8rem; cursor: pointer;" onclick="searchInput.value='${tag}'; performSearch();">
                  ${tag}
                </span>
              `).join('')}
            </div>
            
            <a href="/blog/${item.slug}" style="color: #2563eb; text-decoration: none; font-weight: 500;">
              Read More →
            </a>
          </article>
        `).join('');
      }

      // Add search suggestions
      let suggestionTimeout;
      function showSuggestions() {
        clearTimeout(suggestionTimeout);
        suggestionTimeout = setTimeout(() => {
          const query = searchInput.value.trim();
          if (query.length >= 2) {
            const suggestions = searchEngine.getSuggestions(query, 5);
            if (suggestions.length > 0) {
              // Add suggestion dropdown (simplified implementation)
              console.log('Suggestions:', suggestions);
            }
          }
        }, 300);
      }

      // Event listeners
      searchInput.addEventListener('input', () => {
        performSearch();
        showSuggestions();
      });
      filterPublications.addEventListener('change', performSearch);
      filterResearch.addEventListener('change', performSearch);
      filterSpeaking.addEventListener('change', performSearch);
      filterAdvocacy.addEventListener('change', performSearch);

      // URL parameter support
      const urlParams = new URLSearchParams(window.location.search);
      const queryParam = urlParams.get('q');
      if (queryParam) {
        searchInput.value = queryParam;
        performSearch();
      }

      // Focus search input on page load
      searchInput.focus();
    }).catch(error => {
      console.error('Failed to load search engine:', error);
      // Fallback to simple string matching
      const searchInput = document.getElementById('search-input');
      const searchResults = document.getElementById('search-results');
      const noResults = document.getElementById('no-results');
      
      searchInput.addEventListener('input', () => {
        const query = searchInput.value.trim().toLowerCase();
        if (query.length === 0) {
          searchResults.style.display = 'none';
          noResults.style.display = 'none';
          return;
        }
        
        const results = searchData.filter(item => 
          item.title.toLowerCase().includes(query) ||
          item.description.toLowerCase().includes(query) ||
          item.tags.some(tag => tag.toLowerCase().includes(query))
        );
        
        if (results.length === 0) {
          searchResults.style.display = 'none';
          noResults.style.display = 'block';
        } else {
          searchResults.style.display = 'grid';
          noResults.style.display = 'none';
          searchResults.innerHTML = results.map(item => `
            <article style="border: 1px solid #e5e7eb; border-radius: 0.5rem; padding: 1.5rem; background: white;">
              <h2><a href="/blog/${item.slug}">${item.title}</a></h2>
              <p>${item.description}</p>
            </article>
          `).join('');
        }
      });
    });
  </script>
</BaseLayout>